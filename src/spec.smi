_require "basis.smi"
_require "semver.smi"
_require "protocol.smi"
_require "../util/dict-list.smi"
_require "fsutil.smi"

structure SemVerDict =
struct
      type key = SemVer.t
      type 'a dict(=boxed)

      exception Absent

      val empty : 'a dict
      val singleton : key -> 'a -> 'a dict
      val insert : 'a dict -> key -> 'a -> 'a dict
      val remove : 'a dict -> key -> 'a dict
      val find : 'a dict -> key -> 'a option
      val lookup : 'a dict -> key -> 'a
      val union : 'a dict -> 'a dict -> (key * 'a * 'a -> 'a) -> 'a dict

      val operate : 'a dict -> key -> (unit -> 'a) -> ('a -> 'a) -> 'a option * 'a * 'a dict
      val insertMerge : 'a dict -> key -> 'a -> ('a -> 'a) -> 'a dict

      val isEmpty : 'a dict -> bool
      val member : 'a dict -> key -> bool
      val size : 'a dict -> int

      val toList : 'a dict -> (key * 'a) list
      val domain : 'a dict -> key list
      val map : ('a -> 'b) -> 'a dict -> 'b dict
      val foldl : (key * 'a * 'b -> 'b) -> 'b -> 'a dict -> 'b
      val foldr : (key * 'a * 'b -> 'b) -> 'b -> 'a dict -> 'b
      val app : (key * 'a -> unit) -> 'a dict -> unit

end
structure SemConstrDict =
struct
      type key = SemVer.constraint
      type 'a dict(=boxed)

      exception Absent

      val empty : 'a dict
      val singleton : key -> 'a -> 'a dict
      val insert : 'a dict -> key -> 'a -> 'a dict
      val remove : 'a dict -> key -> 'a dict
      val find : 'a dict -> key -> 'a option
      val lookup : 'a dict -> key -> 'a
      val union : 'a dict -> 'a dict -> (key * 'a * 'a -> 'a) -> 'a dict

      val operate : 'a dict -> key -> (unit -> 'a) -> ('a -> 'a) -> 'a option * 'a * 'a dict
      val insertMerge : 'a dict -> key -> 'a -> ('a -> 'a) -> 'a dict

      val isEmpty : 'a dict -> bool
      val member : 'a dict -> key -> bool
      val size : 'a dict -> int

      val toList : 'a dict -> (key * 'a) list
      val domain : 'a dict -> key list
      val map : ('a -> 'b) -> 'a dict -> 'b dict
      val foldl : (key * 'a * 'b -> 'b) -> 'b -> 'a dict -> 'b
      val foldr : (key * 'a * 'b -> 'b) -> 'b -> 'a dict -> 'b
      val app : (key * 'a -> unit) -> 'a dict -> unit
end
structure StringDict =
struct
      type key = string
      type 'a dict(=boxed)

      exception Absent

      val empty : 'a dict
      val singleton : key -> 'a -> 'a dict
      val insert : 'a dict -> key -> 'a -> 'a dict
      val remove : 'a dict -> key -> 'a dict
      val find : 'a dict -> key -> 'a option
      val lookup : 'a dict -> key -> 'a
      val union : 'a dict -> 'a dict -> (key * 'a * 'a -> 'a) -> 'a dict

      val operate : 'a dict -> key -> (unit -> 'a) -> ('a -> 'a) -> 'a option * 'a * 'a dict
      val insertMerge : 'a dict -> key -> 'a -> ('a -> 'a) -> 'a dict

      val isEmpty : 'a dict -> bool
      val member : 'a dict -> key -> bool
      val size : 'a dict -> int

      val toList : 'a dict -> (key * 'a) list
      val domain : 'a dict -> key list
      val map : ('a -> 'b) -> 'a dict -> 'b dict
      val foldl : (key * 'a * 'b -> 'b) -> 'b -> 'a dict -> 'b
      val foldr : (key * 'a * 'b -> 'b) -> 'b -> 'a dict -> 'b
      val app : (key * 'a -> unit) -> 'a dict -> unit
end

structure Spec =
struct
   exception SpecError of string

   datatype spec_entry =
       Provides of string * SemVer.semver
     | Description of string
     | Requires of string * SemVer.constraint * SemVer.semver option
     | Maintainer of string
     | Remote of Protocol.protocol
     | License of string
     | Platform of string
     | Key of string * string

   type spec = spec_entry list

   (* Parse a smackspec file (every line should be an empty string or a valid
    * spec_entry, such as one would get from FSUtil.getLines) *)
   val parse: string list -> spec
   val fromFile: string -> spec
   val toString: spec -> string

   (* Interprets the spec as a packages file, get the requirements *)
   val key: spec -> string -> string list
   val platforms: spec -> (string * spec) list
   val provides: spec -> string * SemVer.semver
   val remote: spec -> Protocol.protocol
   val requires:
      spec -> (string * SemVer.constraint * SemVer.semver option) list

   (* Interprests a series of specs as a versions.smackspec file *)
   val toVersionIndex:
      spec list -> Protocol.protocol SemVerDict.dict StringDict.dict
end
